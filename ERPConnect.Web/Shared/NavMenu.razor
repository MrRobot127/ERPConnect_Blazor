@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager

@inject IMenuService MenuService

<style>
    .nav-link {
        cursor: pointer;
        display: flex;
        justify-content: space-between;
    }

    /* Remove bullet markers from submenus */
    .submenu {
        list-style-type: none;
        padding-left: 0;
    }

    /* Style for the arrow icons */
    .submenu-arrow {
        margin-left: 10px; /* Add some space between the text and the arrow */
    }
</style>

<div>
    <nav class="flex-column">
        <AuthorizeView>
            <Authorized>
                <div class="nav-item px-3">
                    <NavLink class="nav-link" href="">
                        <span class="oi oi-home" aria-hidden="true"></span> Home
                    </NavLink>
                </div>

                @if (menuList != null)
                {
                    @foreach (var menuItem in menuList.Where(m => m.ParentMenuItemId == null)) // Top-level menu items
                    {
                        <div class="nav-item px-3">
                            <a class="nav-link" href="javascript:void();" Match="NavLinkMatch.All" @onclick="() => ToggleSubMenu(menuItem.MenuItemId)">
                                <span class="oi" aria-hidden="true">@menuItem.Name</span>
                                <span class="submenu-arrow oi" aria-hidden="true">
                                    @if (submenuVisibility.ContainsKey(menuItem.MenuItemId) && submenuVisibility[menuItem.MenuItemId])
                                    {
                                        <span class="submenu-arrow oi oi-chevron-top" aria-hidden="true"></span>
                                    }
                                    else
                                    {
                                        <span class="submenu-arrow oi oi-chevron-bottom" aria-hidden="true"></span>
                                    }
                                </span>
                            </a>
                            @if (submenuVisibility.ContainsKey(menuItem.MenuItemId) && submenuVisibility[menuItem.MenuItemId]) // Check submenu visibility
                            {
                                <ul class="submenu">
                                    @foreach (var subItem in menuList.Where(m => m.ParentMenuItemId == menuItem.MenuItemId)) // Second-level menu items
                                    {
                                        <li class="nav-item px-3">
                                            <a class="nav-link" href="@subItem.Url" Match="NavLinkMatch.All">
                                                <span class="oi" aria-hidden="true">@subItem.Name</span>
                                            </a>
                                            @if (submenuVisibility.ContainsKey(subItem.MenuItemId) && submenuVisibility[subItem.MenuItemId]) // Check sub-submenu visibility
                                            {
                                                <ul class="sub-submenu">
                                                    @foreach (var thirdLevelItem in menuList.Where(m => m.ParentMenuItemId == subItem.MenuItemId)) // Third-level menu items
                                                    {
                                                        <li class="nav-item px-3">
                                                            <a class="nav-link" href="@thirdLevelItem.Url" Match="NavLinkMatch.All">
                                                                <span class="oi" aria-hidden="true">@thirdLevelItem.Name</span>
                                                            </a>
                                                        </li>
                                                    }
                                                </ul>
                                            }
                                        </li>
                                    }
                                </ul>
                            }
                        </div>
                    }
                }

                <div class="nav-item px-3">
                    <NavLink class="nav-link" href="/Identity/Account/Logout" Match="NavLinkMatch.All">
                        <span class="oi oi-power-standby" aria-hidden="true"></span> Logout
                        @* @context.User.Identity.Name *@
                    </NavLink>
                </div>
            </Authorized>
        </AuthorizeView>
    </nav>
</div>

@code {
    private AuthenticationState authState { get; set; }
    private IEnumerable<MenuItem> menuList;
    private Dictionary<int, bool> submenuVisibility = new Dictionary<int, bool>();

    private async Task ToggleSubMenu(int menuItemId)
    {
        if (submenuVisibility.ContainsKey(menuItemId))
        {
            submenuVisibility[menuItemId] = !submenuVisibility[menuItemId];
        }
        else
        {
            submenuVisibility.Add(menuItemId, true);
        }
        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();

        if (!authState.User.Identity.IsAuthenticated)
        {            
            NavigationManager.NavigateTo("/Identity/Account/Login");
        }
        menuList = await MenuService.GetMenuItems();
    }
}
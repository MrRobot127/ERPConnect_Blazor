@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager

@inject IMenuService MenuService

<div class="@NavMenuCssClass" @onclick="ToggleNavMenu">
    <nav class="flex-column">

        <AuthorizeView>
            <Authorized>
                <div class="nav-item px-3">
                    <NavLink class="nav-link" href="">
                        <span class="oi oi-home" aria-hidden="true"></span> Home
                    </NavLink>
                </div>

                @if (menuList != null)
                {
                    foreach (var menuItem in menuList.Where(m => m.ParentMenuItemId == null)) // Top-level menu items
                    {
                        <div class="nav-item px-3">
                            <NavLink class="nav-link" href="@menuItem.Url" Match="NavLinkMatch.All">
                                <span class="oi" aria-hidden="true">@menuItem.Name</span>
                            </NavLink>
                            @if (menuItem.InverseParentMenuItem.Any()) // Check for sub-items
                            {
                                @foreach (var subItem in menuItem.InverseParentMenuItem) // Second-level menu items
                                {
                                    <div class="nav-item px-3">
                                        <NavLink class="nav-link" href="@subItem.Url" Match="NavLinkMatch.All">
                                            <span class="oi" aria-hidden="true">@subItem.Name</span>
                                        </NavLink>
                                        @if (subItem.InverseParentMenuItem.Any())
                                        {
                                            @foreach (var thirdLevelItem in subItem.InverseParentMenuItem) // Third-level menu items
                                            {
                                                <div class="nav-item px-3">
                                                    <NavLink class="nav-link" href="@thirdLevelItem.Url" Match="NavLinkMatch.All">
                                                        <span class="oi" aria-hidden="true">@thirdLevelItem.Name</span>
                                                    </NavLink>
                                                </div>
                                            }
                                        }
                                    </div>
                                }
                            }
                        </div>
                    }
                }

                <div class="nav-item px-3">
                    <NavLink class="nav-link" href="/Identity/Account/Logout" Match="NavLinkMatch.All">
                        <span class="oi oi-power-standby" aria-hidden="true"></span> Logout
                        @* @context.User.Identity.Name *@
                    </NavLink>
                </div>

            </Authorized>
            @*
            <NotAuthorized>
            <div class="nav-item px-3">
            <NavLink class="nav-link" href="/Identity/Account/Login" Match="NavLinkMatch.All">
            <span class="oi oi-lock-locked" aria-hidden="true"></span> Login
            </NavLink>
            </div>
            </NotAuthorized> *@
        </AuthorizeView>
    </nav>
</div>

@code {
    private bool collapseNavMenu = true;
    private string? NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    private AuthenticationState authState { get; set; }
    private IEnumerable<MenuItem> menuList;

    private async Task ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }

    protected override async Task OnInitializedAsync()
    {
        authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();

        if (!authState.User.Identity.IsAuthenticated)
        {
            // User is not authenticated, redirect to the login page
            NavigationManager.NavigateTo("/Identity/Account/Login");
        }
        menuList = await MenuService.GetMenuItems();
    }
    protected override void OnParametersSet()
    {

    }

    protected override void OnAfterRender(bool firstRender)
    {

    }
}

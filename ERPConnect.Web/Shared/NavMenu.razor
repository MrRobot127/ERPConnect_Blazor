@page "/"
@using Microsoft.AspNetCore.Components.Authorization
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager

<div class="@NavMenuCssClass" @onclick="ToggleNavMenu">
    <nav class="flex-column">

        <AuthorizeView>
            <Authorized>
                <div class="nav-item px-3">
                    <NavLink class="nav-link" href=""><span class="oi oi-home" aria-hidden="true"></span> Home</NavLink>
                </div>

                <div class="nav-item px-3">
                    <NavLink class="nav-link" href="/Identity/Account/Logout" Match="NavLinkMatch.All">
                        <span class="oi oi-power-standby" aria-hidden="true"></span> Logout
                        @* @context.User.Identity.Name *@
                    </NavLink>
                </div>
            </Authorized>
@* 
            <NotAuthorized>
                <div class="nav-item px-3">
                    <NavLink class="nav-link" href="/Identity/Account/Login" Match="NavLinkMatch.All">
                        <span class="oi oi-lock-locked" aria-hidden="true"></span> Login
                    </NavLink>
                </div>
            </NotAuthorized> *@
        </AuthorizeView>
    </nav>
</div>

@code {
    private bool collapseNavMenu = true;
    private string? NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    private async Task ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }

    private AuthenticationState AuthState { get; set; }

    protected override async Task OnInitializedAsync()
    {
        AuthState = await AuthenticationStateProvider.GetAuthenticationStateAsync();

        if (!AuthState.User.Identity.IsAuthenticated)
        {
            // User is not authenticated, redirect to the login page
            NavigationManager.NavigateTo("/Identity/Account/Login");
        }
    }
}
